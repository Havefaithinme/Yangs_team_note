리스트 자료형
여러개의 데이터를 연속적으로 담아 처리하기 위해 사용하는 자료형 
사용자 입장에서 C나 자바에서의 배열의 기능 및 연결 리스트와 유사한 기능을 지원
C++의 STL vector와 기능적으로 유사함
리스트 대신에 배열 혹은 테이블이라고 부르기도한다. 

리스트 초기화
리스트는 대괄호([])안에 원소를 넣어 초기화하며, 쉼표(,)로 원소를 구분한다.
비어있는 리스트를 선언하고자 할 때는 list() 혹은 간단히 [] 를 이용할수 있다.
리스트의 원소에 접근할 때는 인덱스(index)값을 괄호에 넣는다. 
인덱스는 0부터 시작한다.

리스트의 인덱싱과 슬라이싱
리스트에서 연속적인 위치를 갖는 원소들을 가져와야 할 때는 슬라이싱을 이용
대괄혼 안에 콜론(:)을 넣어서 시작인덱스와 끝 인덱스를 설정
끝 인덱스는 실제 인덱스보다 1을 더 크게 설정 (이는 모든 언어에서 관행적으로 사용됨)

리스트 컴프리헨션
리스트를 초기화하는 방법 중 하나임
대괄호 안에 조건문과 반복문을 적용하여 리스트를 초기화 할 수 있다
예시 - 
array = [i for i in range(10)]

print(array)

array = [i for i in range(20) if i % 2 == 1]

print(array)

array = [i * i for i in range(1,10)]

print(array)

리스트 컴프리헨션의 장점은 간결한 코드 작성에 있다. 

리스트 컴프리헨션은 2차원 리스트를 초기화할 때 효과적으로 사용 될 수 있다. 
특히 N x M 크기의 2차원 리스트를 한번에 초기화 해야 할 때 매우 유용함
좋은 예시) array = [[0] * m for _ in range(n)]

만약 2차원 리스트를 초기화 할 때 다음과 같이 작성하면 예기치 않은 결과가 나올 수 있다
잘못된 예시) array = [[0] * m] *n
위 코드는 전체 리스트 안에 포함된 각 리스트가 모두 같은 객체로 인식된다. 

언더바는 언제 사용??
파이썬에서는 반복을 수행하되 반복을 위한 변수의 값을 무시하고자 할 때 언더바를 자주 사용한다. 

리스트 관련 기타 메서드 
append()  변수명.append()                                 O(1)
sort()  변수명.sort() 또는 변수명.sort(reverse = True)    O(NlogN)
reverse() 변수명.reverse()                                O(N)
insert() insert(삽입할 위치 인덱스, 삽입할 값)              O(N)
count() 변수명.count(특정값)                               O(N)
remove() 변수명.remove(특정값)                             O(N)


리스트에서 특정 값을 가지는 원소를 모두 제거하기
a = [1,2,3,4,5,5,5]
remove_set = {3,5} #집합 자료형

result = [i for i in a if not in remove_set]
print(result)
