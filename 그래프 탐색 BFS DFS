그래프 탐색알고리즘: DFS/BFS 알고리즘
탐색(search)이란 많은 양의 데이터 중에서 원하는 데이터를 찾는 과정을 말한다. 
대표적인 그래프 탐색 알고리즘으로는 DFS 와 BFS가 있다. 코딩테스트에서 매우 자주 등장하는 유형

스택 자료구조 
먼저들어온 데이터가 나중에 나가는 형식(선입후출)의 자료구조입니다. 
입구와 출구가 동일한 형태로 스택을 시각화 할수 있음. (박스 쌓기) 

스택구현예제 
stack = []

stack.append(5)
stack.append(2)
stack.append(3)
stack.append(7)
stack.pop()
stack.append(1)
stack.append(4)
stack.pop()

#최상단 원소부터 출력
print(stack[::-1])
#최하단 원소부터 출력 
print(stack)


큐 자료구조

먼저 들어온 데이터가 먼저 나가는 형식(선입선출)의 자료구조
큐는 입구와 출구가 모두 뚫려 있는 터널과 같은 형태로 시각화 할 수 있다. 

큐 구현 예제 
from collections import deque

queue = deque()

queue.append(5)
queue.append(4)
queue.append(3)
queue.append(7)
queue.popleft()
queue.append(1)
queue.append(4)
queue.popleft()

print(queue)
queue.reverse()
print(queue)

리스트가 아니라 deque을 이용해야 시간복잡도가 작아진다. 

-------------------------------------------------------------------------------------------------
재귀 함수 (Recursive Function)란 자기 자신을 다시 호출하는 함수 
단순한 형태의 재귀 함수 예제 
재귀함수를 호출합니다. 라는 문자열을 무한히 출력합니다. 
어느 정도 출력하다가 최대 재귀 깊이 초과 메세지가 출력됩니다. 

def recursive_function():
    print('재귀 함수를 호출합니다.')
    recursive_function()

recursive_function()

재귀 함수의 종료조건
재귀함수를 문제풀이에서 사용 할 때는 재귀 함수의 종료조건을 반드시 명시해야 한다. 
종료조건을 제대로 명시하지 않으면 함수가 무한히 호출될 수 있다. 
종료조건을 포함한 재귀 함수 예제 

def recursive_function(i):
    if i == 100:
        return
    print(i, '번째 재귀함수에서', i + 1, '번째 재귀함수를 호출합니다.')
    recursive_function(i + 1)
    print(i, '번째 재귀함수를 종료합니다.')

recursive_function(1)

재귀함수의 특징은 마치 스택에 데이터를 넣는 거 처럼 실제로 각각의 함수에 대한 정보가 스택프레임에 담기게 되어서 차례대로 호출이 되었다가 가장 마지막에 처음에 호출했던 함수가 종료가 된다. 

팩토리얼 구현 예제 
n! = 1 x 2 x 3 x 4 x .... (n-1) x n
0! = 1
1! = 1

#반복적으로 구현한 n!
def factorial_iterative(n):
    result = 1
    for i in range(1, n +1):
        result *= i
    return result

#재귀적으로 구현한 n!
def factorial recursive(n):
    if n <= 1:
        return 1
    return n * factorial_recursive(n-1)   

최대공약수 계산(유클리드 호제법) 예제 
두개의 자연수에 대한 최대공약수를 구하는 대표적인 알고리즘으로는 유클리드 호제법이 있다. 
유클리드 호제법 
 두 자연수 A B에 대하여 (A>B) A를 B로 나눈 나머지를 R이라고 합시다. 
 이때 A 와 B의 최대 공약수는 B와 R의 최대공약수와 같다. 
유클리드 호제법의 아이디어를 그대로 재귀 함수로 작성할 수있다. 


def gcd(a, b):
    if a % b == 0 :
        return b
    else:
        return gcd(b, a % b)

print(gcd(192, 162))

재귀 함수 사용의 유의 사항
재귀함수를 잘 활용하면 복잡한 알고리즘을 간결하게 작성할 수 있다. 
단 오히려 다른 사람이 이해 하기 어려운 형태의 코드가 될 수 있으므로 신중하게 사용
모든 재귀 함수는 반복문을 이용하여 동일한 기능을 구현할 수 있음. 
재귀 함수가 반복문보다 유리한 경우도 있고 불리한 경우도 있음. 
컴퓨터가 함수를 연속적으로 호출하면 컴퓨터 메모리 내부의 스택 프레임에 쌓인다. 
그래서 스택을 사용해야 할 때 구현상 스택 라이브러리 대신에 재귀 함수를 이용하는 경우가 많다. 

---------------------------------------------------------------------------------------------------------
DFS(Depth-Fisrt Search)
DFS는 깊이 우선 탐색 이라고도 부르며 그래프에서 깊은 부분을 우선적으로 탐색하는 알고리즘 
DFS는 스택 자료구조(혹은 재귀함수)를 이용하며, 구체적인 동작 과정은 다음과 같다. 
1. 탐색 시작 노드를 스택에 삽입하고 방문 처리를 한다.
2. 스택의 최상단 노드에 방문하지 않은 인접한 노드가 하나라도 있으면 그 노드를 스택에 넣고 방문처리한다. 방문하지 않은 인접 노드가 없으면 스택에서 최상단 노드를 꺼낸다. 
3. 더이상 2번의 과정을 수행할 수 없을 때까지 반복한다. 


DFS 소스코드 예제 
#DFS메서드 정의 
def dfs(graph, v, visited):
    #현재 노드를 방문 처리 
    visited[v] = True
    print(v, end='')
    for i in graph[v]:
        if not visited[i]:
            dfs(graph, i, visited)

graph = [
[],
[2, 3, 8],
[1, 7],
[1, 4, 5],
[3, 5],
[3, 4],
[7],
[2, 6, 8],
[1, 7],
]

visited = [False] * 9 
dfs(graph, 1, visited)

BFS(Breadth-Fisrt Search)
BFS는 너비 우선 타색이라고도 부르며, 그래프에서 가까운 노드부터 우선적으로 탐색하는 알고리즘. 
BFS는 큐 자료구조를 이용하며, 구체적인 동작 과정은 다음과 같다. 
1. 탐색 시작 노드를 큐에 삽입하고 방문처리를 한다. 
2. 큐에서 노드를 꺼낸 뒤에 해당 노드의 인접 노드중에서 방문하지 않은 노드를 모두 큐에 삽입하고 방문 처리한다. 
3. 더이상 2번의 과정을 수행할 수 없을 때까지 반복한다. 

BFS 소스코드 예제 
from collections import deque

def bfs(graph, start, visited):
    queue = deque([start])
    visited[start] = True
    while queue:
        v = queue.popleft()
        print(v, end = '')
        for i in graph[v]:
            if not visited[i]:
                queue.append(i)
                visited[i] = True


graph = [
[],
[2, 3, 8],
[1, 7],
[1, 4, 5],
[3, 5],
[3, 4],
[7],
[2, 6, 8],
[1, 7],
]

visited = [False] * 9 
bfs(graph, 1, visited)

음료수 얼려 먹기 문제 

N x M 크기의 얼음 틀이 있다. 구멍이 뚫려 있는 부분은 0, 칸막이가 존재하는 부분은 1로 표시된다. 
구멍이 뚫려 있는 부분끼리 상하좌우로 부텅 있는 경우 서로 연결되어있는것으로 간주한다. 
이때 얼음 틀의 모양이 주어졌을 때 생성되는 총 아이스크림의 개수를 구하는 프로그램을 작성하자 

문제 조건 
입력조건 : 첫번째 줄에 얼음틀의 세로 길이 N과 가로길이 M이 주어진다. (1 <= N, M <= 1000)
	두번째 줄부터 N +1 번째 줄까지 얼음 틀의 형태가 주어진다. 
	이때 구멍이 뚫려 있는 부분은 0 그렇지 않은 부분은 1 
출력조건 : 한번에 만들수 있는 아이스크림 개수를 출력 

문제해결아이디어 
이 문제는 DFS 혹은 BFS로 해결할수 있다. 일단 앞에서 배운 대로 얼음을 얼릴수있는공간이 
상하좌우로 연결되어 있다고 표현할수 있으므로 그래프 형태로 모델링할수있다.
