함수와 람다 표현식 
함수(Function)란 특정한 작업을 하나의 단위로 묶어 놓은 것을 의미한다. 
함수를 사용하면 불필요한 소스코드의 반복을 줄일 수 있다. 

함수의 종류
내장함수 : 파이썬이 기본적으로 제공하는 함수 
사용자 정의 함수 : 개발자가 직접 정의하여 사용할 수 있는 함수 

함수 정의하기 
프로그램에는 똑같은 코드가 반복적으로 사용되어야 할 때가 많다. 
함수를 사용하면 소스코드의 길이를 줄일 수 있다. 
매개변수 : 함수 내부에서 사용할 변수 
반환 값 : 함수에서 처리 된 결과를 반환 

def 함수명(매개변수):
    실행할 소스코드
    return 반환 값 

파라미터 지정하기 
파라미터의 변수를 직접 지정할 수 도 있다. 
이 경우 매개변수의 순서가 달라도 상관이 없다. 

def add(a, b):
    print('함수의 결과:', a + b)

add(b = 3, a = 7)

global 키워드 
global 키워드로 변수를 지정하면 해당 함수에서는 지역변수를 만들지 않고, 함수 바깥에 선언된 변수를 바로 참조하게 된다. 

a = 0 

def func():
    global a #함수 바깥쪽에 있는 a를 참조하기 위해서는 global 키워드를 사용해줘야 한다. 하지만 단		순히 값을 참조하는 경우에는 global 키워드를 사용하지 않아도 된다. 전역변수와 		지역변수로 동일한 변수가 존재한다면 지역변수가 우선적으로 처리된다.  
    a += 1

for i in range(10):
    func()

print(a) 

여러 개의 반환 값 
파이썬에서는 함수는 여러 개의 반환 값을 가질 수 있다. 
def operator(a, b):  #팩킹 과정
    add_var = a + b
    subtract_var = a - b
    multiple_var = a * b
    divide_var = a / b
    return add_var, subtract_var, multiple_var, divide_var
a,b,c,d = operator(7, 3) #언팩킹 과정 - 반환된 값을 차례대로 특정 변수에 담는 과정 
print(a, b, c, d) 


람다 표현식 
람다 표현식을 이용하면 함수를 간단하게 작성할 수 있다. 
특정한 기능을 수행하는 함수를 한 줄에 작성할 수 있다는 점이 특징입니다. 

def add(a,b):
    return a + b 
#일반적으로 add()멧드 사용
#람다표현식으로 구현한 add()메서드 
print(lambda a,b : a + b)(3, 7)

함수 자체를 입력으로 받는 또 다른 함수가 존재 할때 또는 함수의 기능이 매우 간단하거나 한번 사용하고 말 경우에 효과적으로 사용이 가능하다. 

예시) 내장 함수에서 자주 사용되는 람다 함수 
array = [('홍길동', 50), ('이순신', 50), ('아무개', 74)]

def my_key(x):
    return x[1]

print(sorted(array, key = my_key))
print(sorted(array, key = lambda x : x[1]))

예시) 여러개의 리스트에 적용
list1 = [1,2,3,4,5]
list2 = [6,7,8,9,10]

result = map(lambda a, b: a + b, list1, list2)  #map 함수는 각각의 원소에 어떤 함수를 적용하고자 할				          때 적용이 가능하다. 

print(list(result))

